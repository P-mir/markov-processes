opt_policy_rule1 <- v_iter(p_normal1,p_secure1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_normal2,p_secure2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=15)
result_matrix_rule2 <- matrix(ncol=5,nrow=15)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 15){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 15){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(1,policy_list_rule1[[1]],1),main=colnames(result_matrix_rule1)[i])
}
#---------Resultats à partir de la case 1 : Boxplots-Règle 2------------------------
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(2,policy_list_rule2[[1]],1),main=colnames(result_matrix_rule2)[i])
}
result_matrix_rule1
result_matrix_rule2
opt_policy_rule1 <- v_iter(p_normal1,p_secure1,p_risk1,C)[[1]]
opt_policy_rule1
opt_policy_rule2 <- v_iter(p_normal2,p_secure2,p_risk2,C)[[1]]
opt_policy_rule2
c(rep(1,15))
simulation_game(2,opt_policy_rule2,1)
mean(simulation_game(2,opt_policy_rule2,1))
simulation_game(2,opt_policy_rule2,1)
mean(simulation_game(2,opt_policy_rule2,1))
# Vecteur coût de depart
C <-c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
# c(seq(14,0,-1))
# c(10,9,8,7,6,5,4,3,2,1,4,3,2,1,0)
# c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
# c(20,18,16,14,12,10,8,6,4,1,8,6,4,1,0)
v_iter=function(S,N,R,C) {
V<- C
a<-c(rep(0,15))
for( t  in 1 : 1000){
for (i in 1 : 15 ){
secure <- C[i]+S[i,]%*%V
normal <- C[i]+N[i,]%*%V
risk   <- C[i]+R[i,]%*%V
V[i] <- min(secure,normal,risk)
if(secure < normal & secure < risk){
a[i]=1
}
else if (normal < secure & normal < risk) {
a[i]=2
}
else {
a[i]=3
}
}
}
return(list(a,V))
}
a <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
V <- v_iter(p_secure1,p_normal1,p_risk1,C)[[2]]
b <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
Vbis <- v_iter(p_secure2,p_normal2,p_risk2,C)[[2]]
#----- Algorithme pour la règle 2 ("circle game") -------------
## ------------ Use of dice 1,2,3 only -----------------
c=rep(1,15)
d=rep(2,15)
e=rep(3,15)
rule1 <- list()
rule1[[1]]=a
rule1[[2]]=c
rule1[[3]]=d
rule1[[4]]=e
rule2 <- list()
rule2[[1]]=b
rule2[[2]]=c
rule2[[3]]=d
rule2[[4]]=e
#---------------SIMULATION DU JEU-------------------------------------------------------------
for (k in c(1,2)){#circle game ou non
Rule = k
for (j in 1:4){
if (Rule ==1){
policy = rule1[[j]]}
if (Rule == 2){
policy = rule2[[j]]}
vector_step=c()
for (i in 1 : 10000){
step = 1
position = 1
end=FALSE
while (end == FALSE) {
if (policy[position] == 1) {
dice<- roll_dice(1)
if (position  == 3){
position <- handle_three(dice)
}
else if (position == 10 && dice == 1){
position <- 15
}
else {
position <- position + dice
}
step = step +1
}
else if (policy[position] == 2){
dice <- roll_dice(2)
if(position == 3){
position <- handle_three(dice)
}
else if (position == 9 && dice == 2 ){
position <- 15
}
else if (position == 10 && dice >0){
position <-15 +(dice-1)
}
else {
position <- position + dice
if( position == 7 && activate_trap()){
position = 4
}
else if (position == 13 && activate_trap()){
position = 1
}
}
step = step +1
}
else {
dice <- roll_dice(3)
if (position == 3){
position <- handle_three(dice)
}
else if (position == 8 && dice ==3){
position == 15
}
else if (position == 9 && dice>=2){
position = 15 + dice -2
}
else if (position == 10 && dice >= 1){
position = 15 + dice -1
}
else {
position <- position + dice
if (position == 7){
position = 4
}
if(position ==13){
position =1
}
}
step = step +1
}
if (position == 15 ) {
end = TRUE
vector_step[i] = step
}
if(position > 15){
if (Rule==2){
position = position -15
}
else if (Rule==1){
end = TRUE
vector_step[i] = step
}
}
}
}
if (Rule ==1){
if (j == 1) {
cat("Value Iteration: nombre de coups moyen avec la règle 1: ",mean(vector_step),"\n")
cat("Stratégie: ",a,"\n Total expected cost depuis la case 1: ",V[1],"\n\n")
}
else if (j == 2) {
cat('Nombre de coups moyen en utilisant seulement le dé "secure", avec la règle 1: ',mean(vector_step),"\n")
}
else if (j == 3) {
cat('Nombre de coups moyen en utilisant seulement le dé "normal", avec la règle 1: ',mean(vector_step),"\n")
}
else if (j == 4) {
cat('Nombre de coups moyen en utilisant seulement le dé "risky", avec la règle 1: ',mean(vector_step),"\n\n")  }
}
if (Rule ==2){
if (j == 1) {
cat("Value Iteration: nombre de coups moyen avec la règle 2: ",mean(vector_step),"\n")
cat("Stratégie: ",b,"\n Total expected cost depuis la case 1: ",Vbis[1],"\n\n")
}
else if (j == 2) {
cat('Nombre de coups moyen en utilisant seulement le dé "secure", avec la règle 2: ',mean(vector_step),"\n")
}
else if (j == 3) {
cat('Nombre de coups moyen en utilisant seulement le dé "normal", avec la règle 2: ',mean(vector_step),"\n")
}
else if (j == 4) {
cat('Nombre de coups moyen en utilisant seulement le dé "risky", avec la règle 2: ',mean(vector_step),"\n")
}
}
}
}
opt_policy_rule1 <- v_iter(p_normal1,p_secure1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_normal2,p_secure2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
simulation_game<-function(R,S,P) {
rule<-R
policy<-S
start <- P
vector_step=c()
for (i in 1 : 10000){
step = 1
position = start
end=FALSE
while (end == FALSE) {
if (policy[position] == 1) {
dice<- roll_dice(1)
if (position  == 3){
position <- handle_three(dice)
}
else if (position == 10 && dice == 1){
position <- 15
}
else {
position <- position + dice
}
step = step +1
}
else if (policy[position] == 2){
dice <- roll_dice(2)
if(position == 3){
position <- handle_three(dice)
}
else if (position == 9 && dice == 2 ){
position <- 15
}
else if (position == 10 && dice >0){
position <-15 +(dice-1)
}
else {
position <- position + dice
if( position == 7 && activate_trap()){
position = 4
}
else if (position == 13 && activate_trap()){
position = 1
}
}
step = step +1
}
else {
dice <- roll_dice(3)
if (position == 3){
position <- handle_three(dice)
}
else if (position == 8 && dice ==3){
position == 15
}
else if (position == 9 && dice>=2){
position = 15 + dice -2
}
else if (position == 10 && dice >= 1){
position = 15 + dice -1
}
else {
position <- position + dice
if (position == 7){
position = 4
}
else if(position ==13){
position =1
}
}
step = step +1
}
if (position == 15 ) {
end = TRUE
vector_step[i] = step
}
if(position > 15){
if (rule==2){
position = position -15
}
else if (rule==1){
end = TRUE
vector_step[i] = step
}
}
}
}
return(vector_step)
}
simulation_game(opt_policy_rule1,)
opt_policy_rule2
v_iter(p_normal2,p_secure2,p_risk2,C)[[1]]
v_iter(p_normal2,p_secure2,p_risk2,C)[[1]]
#---------------ALGORITHME D'ITERATION DE LA VALEUR------------------------
# Vecteur coût de depart
C <-c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
# c(seq(14,0,-1))
# c(10,9,8,7,6,5,4,3,2,1,4,3,2,1,0)
# c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
# c(20,18,16,14,12,10,8,6,4,1,8,6,4,1,0)
v_iter=function(S,N,R,C) {
V<- C
a<-c(rep(0,15))
for( t  in 1 : 1000){
for (i in 1 : 15 ){
secure <- C[i]+S[i,]%*%V
normal <- C[i]+N[i,]%*%V
risk   <- C[i]+R[i,]%*%V
V[i] <- min(secure,normal,risk)
if(secure < normal & secure < risk){
a[i]=1
}
else if (normal < secure & normal < risk) {
a[i]=2
}
else {
a[i]=3
}
}
}
return(list(a,V))
}
a <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
V <- v_iter(p_secure1,p_normal1,p_risk1,C)[[2]]
b <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
Vbis <- v_iter(p_secure2,p_normal2,p_risk2,C)[[2]]
a
b
opt_policy_rule2
v_iter(p_normal1,p_secure1,p_risk1,C)[[1]]
v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
# Vecteur coût de depart
C <-c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
# c(seq(14,0,-1))
# c(10,9,8,7,6,5,4,3,2,1,4,3,2,1,0)
# c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
# c(20,18,16,14,12,10,8,6,4,1,8,6,4,1,0)
v_iter=function(S,N,R,C) {
V<- C
a<-c(rep(0,15))
for( t  in 1 : 1000){
for (i in 1 : 15 ){
secure <- C[i]+S[i,]%*%V
normal <- C[i]+N[i,]%*%V
risk   <- C[i]+R[i,]%*%V
V[i] <- min(secure,normal,risk)
if(secure < normal & secure < risk){
a[i]=1
}
else if (normal < secure & normal < risk) {
a[i]=2
}
else {
a[i]=3
}
}
}
return(list(a,V))
}
a <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
V <- v_iter(p_secure1,p_normal1,p_risk1,C)[[2]]
b <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
Vbis <- v_iter(p_secure2,p_normal2,p_risk2,C)[[2]]
a
b
v_iter(p_normal1,p_secure1,p_risk1,C)[[1]]
v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
#---------------ALGORITHME D'ITERATION DE LA VALEUR------------------------
# Vecteur coût de depart
C <-c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
v_iter=function(S,N,R,C) {
V<- C
a<-c(rep(0,15))
for( t  in 1 : 1000){
for (i in 1 : 15 ){
secure <- C[i]+S[i,]%*%V
normal <- C[i]+N[i,]%*%V
risk   <- C[i]+R[i,]%*%V
V[i] <- min(secure,normal,risk)
if(secure < normal & secure < risk){
a[i]=1
}
else if (normal < secure & normal < risk) {
a[i]=2
}
else {
a[i]=3
}
}
}
return(list(a,V))
}
v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
v_iter(p_normal1,p_secure1,p_risk1,C)[[1]]
v_iter(p_normal1,p_secure1,p_risk1,C)[[1]]
v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(1,policy_list_rule1[[1]],1),main=colnames(result_matrix_rule1)[i],ylab=c(0,250))
}
#---------Resultats à partir de la case 1 : Boxplots-Règle 2------------------------
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(2,policy_list_rule2[[1]],1),main=colnames(result_matrix_rule2)[i],ylab=c(0,250))
}
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(1,policy_list_rule1[[1]],1),main=colnames(result_matrix_rule1)[i],ylab=c(0,250))
}
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
result_matrix_rule2
result_matrix_rule1
opt_policy_rule1
opt_policy_rule2
v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule1
v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
opt_policy_rule2
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
result_matrix_rule1
mean(simulation_game(2,opt_policy_rule2,1))
mean(simulation_game(2,opt_policy_rule2,1))
mean(simulation_game(2,opt_policy_rule2,1))
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
#---------Simulation des jeux à partir de toutes les cases-------------------
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
result_matrix_rule1
result_matrix_rule2
