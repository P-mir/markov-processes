position <- 15
}
else {
position <- position + dice
}
step = step +1
}
else if (policy[position] == 2){
dice <- roll_dice(2)
if(position == 3){
position <- handle_three(dice)
}
else if (position == 9 && dice == 2 ){
position <- 15
}
else if (position == 10 && dice >0){
position <-15 +(dice-1)
}
else {
position <- position + dice
if( position == 7 && activate_trap()){
position = 4
}
else if (position == 13 && activate_trap()){
position = 1
}
}
step = step +1
}
else {
dice <- roll_dice(3)
if (position == 3){
position <- handle_three(dice)
}
else if (position == 8 && dice ==3){
position == 15
}
else if (position == 9 && dice>=2){
position = 15 + dice -2
}
else if (position == 10 && dice >= 1){
position = 15 + dice -1
}
else {
position <- position + dice
if (position == 7){
position = 4
}
else if(position ==13){
position =1
}
}
step = step +1
}
if (position == 15 ) {
end = TRUE
vector_step[i] = step
}
if(position > 15){
if (rule==2){
position = position -15
}
else if (rule==1){
end = TRUE
vector_step[i] = step
}
}
}
}
return(vector_step)
}
v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
v_iter(p_secure1,p_normal1,p_risk1,C)[[2]]
mean(simulation_game(2,opt_policy_rule2,1))
mean(simulation_game(2,opt_policy_rule2,1))
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
result_matrix_rule2
v_iter(p_secure1,p_normal1,p_risk1,C)[[2]]
v_iter(p_secure2,p_normal2,p_risk2,C)[[2]]
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(1,policy_list_rule1[[1]],1),main=colnames(result_matrix_rule1)[i],ylab=c(0,250))
}
#---------Resultats à partir de la case 1 : Boxplots-Règle 2------------------------
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(2,policy_list_rule2[[1]],1),main=colnames(result_matrix_rule2)[i],ylab=c(0,250))
}
windows()
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(1,policy_list_rule1[[1]],1),main=colnames(result_matrix_rule1)[i],ylab=c(0,250))
}
#---------Resultats à partir de la case 1 : Boxplots-Règle 2------------------------
windows()
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(2,policy_list_rule2[[1]],1),main=colnames(result_matrix_rule2)[i],ylab=c(0,250))
}
result_matrix_rule1
result_matrix_rule2
random_dice
opt_policy_rule1
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
result_matrix_rule1
result_matrix_rule2
windows()
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(1,policy_list_rule1[[1]],1),main=colnames(result_matrix_rule1)[i],ylab=c(0,250))
}
#---------Resultats à partir de la case 1 : Boxplots-Règle 2------------------------
windows()
par(mfrow=c(1,5))
for( i in 1 : 5){
boxplot(simulation_game(2,policy_list_rule2[[1]],1),main=colnames(result_matrix_rule2)[i],ylab=c(0,250))
}
result_matrix_rule1
result_matrix_rule2
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,16))
always_dice2 <- c(rep(2,16))
always_dice3 <- c(rep(3,16))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),16,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=16)
result_matrix_rule2 <- matrix(ncol=5,nrow=16)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
opt_policy_rule1
for(i in 1 : 5){
for ( j in 1 : 16){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
#File path
setwd("~/GitHub/markov-processes")
#setwd("C:/Users/p/Documents/GitHub/markov-processes")
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,16))
always_dice2 <- c(rep(2,16))
always_dice3 <- c(rep(3,16))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),16,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=16)
result_matrix_rule2 <- matrix(ncol=5,nrow=16)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 16){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
result_matrix_rule1
opt_policy_rule1
v_iter(p_secure1,p_normal1,p_risk1,C)[[2]]
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,16))
always_dice2 <- c(rep(2,16))
always_dice3 <- c(rep(3,16))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),16,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=16)
result_matrix_rule2 <- matrix(ncol=5,nrow=16)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
#---------Simulation des jeux à partir de toutes les cases-------------------
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 16){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
result_matrix_rule1
v_iter(p_secure1,p_normal1,p_risk1,C)[[2]]
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
C <-c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
C_prison <-c(1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0)
length(C)
length(C_prison)x
length(C_prison)
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,C)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,C)[[1]]
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,Cost)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,Cost)[[1]]
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,Cost)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,Cost)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
#---------Création des stratégies et matrice de résultats-------------------
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,Cost)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,Cost)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
#---------Simulation des jeux à partir de toutes les cases-------------------
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
result_matrix_rule1
result_matrix_rule2
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,Cost)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,Cost)[[1]]
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule1
policy_list_rule2
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
result_matrix_rule2
v_iter(p_secure2,p_normal2,p_risk2,Cost)[[2]]
result_matrix_rule2
result_matrix_rule1
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
result_matrix_rule1
p_secure1
v_iter(p_secure1,p_normal1,p_risk1,Cost)
result_matrix_rule1
opt_policy_rule1 <- v_iter(p_secure1_prison,p_normal1_prison,p_risk1_prison,Cost_prison)[[1]]
opt_policy_rule2 <- v_iter(p_secure2_prison,p_normal2_prison,p_risk2_prison,Cost_prison)[[1]]
always_dice1 <- c(rep(1,16))
always_dice2 <- c(rep(2,16))
always_dice3 <- c(rep(3,16))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),16,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1_prison <- matrix(ncol=5,nrow=15)
result_matrix_rule2_prison <- matrix(ncol=5,nrow=15)
colnames(result_matrix_rule1_prison) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2_prison) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
#---------Simulation des jeux à partir de toutes les cases-------------------
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 15){
result_matrix_rule1_prison[j,i] <- mean(simulation_game_prison(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1_prison,"result_matrix_rule1_prison.txt")
result_matrix_rule1_prison
write.table(result_matrix_rule1_prison,"result_matrix_rule1_prison.txt")
write.table(result_matrix_rule2_prison,"result_matrix_rule2_prison.txt")
for(i in 1 : 5){
for ( j in 1 : 15){
result_matrix_rule2_prison[j,i] <- mean(simulation_game_prison(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2_prison,"result_matrix_rule2_prison.txt")
result_matrix_rule2_prison
opt_policy_rule2 <- v_iter(p_secure2_prison,p_normal2_prison,p_risk2_prison,Cost_prison)[[1]]
opt_policy_rule2
v_iter(p_secure2_prison,p_normal2_prison,p_risk2_prison,Cost_prison)[[2]]
opt_policy_rule1 <- v_iter(p_secure1_prison,p_normal1_prison,p_risk1_prison,Cost_prison)[[1]]
opt_policy_rule2 <- v_iter(p_secure2_prison,p_normal2_prison,p_risk2_prison,Cost_prison)[[1]]
always_dice1 <- c(rep(1,16))
always_dice2 <- c(rep(2,16))
always_dice3 <- c(rep(3,16))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),16,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1_prison <- matrix(ncol=5,nrow=15)
result_matrix_rule2_prison <- matrix(ncol=5,nrow=15)
colnames(result_matrix_rule1_prison) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2_prison) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 15){
result_matrix_rule2_prison[j,i] <- mean(simulation_game_prison(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2_prison,"result_matrix_rule2_prison.txt")
result_matrix_rule1_prison
result_matrix_rule2_prison
result_matrix_rule1_prison <- read.table("result_matrix_rule1_prison.txt")
result_matrix_rule1_prison
mean(simulation_game_prison(2,optimal_policy_rule2,1))
mean(simulation_game_prison(2,opt_policy_rule2,1))
opt_policy_rule2
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
opt_policy_rule1 <- v_iter(p_secure1,p_normal1,p_risk1,Cost)[[1]]
opt_policy_rule2 <- v_iter(p_secure2,p_normal2,p_risk2,Cost)[[1]]
opt_policy_rule1
v_iter(p_secure1,p_normal1,p_risk1,Cost)[[2]]
always_dice1 <- c(rep(1,15))
always_dice1 <- c(rep(1,15))
always_dice2 <- c(rep(2,15))
always_dice3 <- c(rep(3,15))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),15,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1 <- matrix(ncol=5,nrow=14)
result_matrix_rule2 <- matrix(ncol=5,nrow=14)
colnames(result_matrix_rule1) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
#---------Simulation des jeux à partir de toutes les cases-------------------
# simulation des jeux pour la règle 1
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule1[j,i] <- mean(simulation_game(1,policy_list_rule1[[i]],j))
}
}
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
result_matrix_rule1
opt_policy_rule1
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 14){
result_matrix_rule2[j,i] <- mean(simulation_game(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
result_matrix_rule2
source('transition_matrix.R')
source('value_iteration.R')
source('simulation_game.R')
write.table(result_matrix_rule1,"result_matrix_rule1.txt")
write.table(result_matrix_rule2,"result_matrix_rule2.txt")
opt_policy_rule1 <- v_iter(p_secure1_prison,p_normal1_prison,p_risk1_prison,Cost_prison)[[1]]
opt_policy_rule2 <- v_iter(p_secure2_prison,p_normal2_prison,p_risk2_prison,Cost_prison)[[1]]
always_dice1 <- c(rep(1,16))
always_dice2 <- c(rep(2,16))
always_dice3 <- c(rep(3,16))
set.seed(1234)  # pour avoir toujours la même stratégie random
random_dice <- sample(c(1,2,3),16,replace=TRUE)
policy_list_rule1 <- list(opt_policy_rule1,always_dice1,always_dice2,always_dice3,random_dice)
policy_list_rule2 <- list(opt_policy_rule2,always_dice1,always_dice2,always_dice3,random_dice)
result_matrix_rule1_prison <- matrix(ncol=5,nrow=15)
result_matrix_rule2_prison <- matrix(ncol=5,nrow=15)
colnames(result_matrix_rule1_prison) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
colnames(result_matrix_rule2_prison) <- c("Optimal policy","Dice 1","Dice 2", "Dice 3", "Random dice")
# simulation des jeux pour la règle 2
for(i in 1 : 5){
for ( j in 1 : 15){
result_matrix_rule2_prison[j,i] <- mean(simulation_game_prison(2,policy_list_rule2[[i]],j))
}
}
write.table(result_matrix_rule2_prison,"result_matrix_rule2_prison.txt")
result_matrix_rule2_prison
v_iter(p_secure2_prison,p_normal2_prison,p_risk2_prison,Cost_prison)[[2]]
